@page "/"
@using Pbrt.Demos
@using Pbrt.Demos.renderers
@using pbrt.Core
@using pbrt_lab.AutoForm
@using System.Drawing
@using System.Drawing.Imaging
@using Pbrt.Demos.Configs
@using Color = System.Drawing.Color
<PageTitle>Pbrt</PageTitle>

<div class="row">
    <div class="col">
        <select @onchange="OnSelectRenderer">
            <option value=""></option>
            @foreach (var rendererName in Renderers.Keys)
            {
                <option value=@(rendererName)>@rendererName</option>
            }
        </select>
    </div>
    <div class="col">
    <div class="btn-group">
        <button class="btn btn-primary" @onclick="Run">Run</button>
        <button class="btn btn-primary" @onclick="Refresh">Refresh</button>
        <button class="btn btn-primary" @onclick="Stop">Stop</button>
    </div>
    </div>
</div>
<div class="row">
    <div class="progress">
        <div class="progress-bar" role="progressbar" style="width: @((int)ProgressPct)%;" aria-valuenow="@ProgressPct" aria-valuemin="0" aria-valuemax="100">@((int)ProgressPct)%</div>
    </div>
</div>
<div class="row">
    <p>Text: @Text</p>
    <div class="col">
        <AutoFormComponent Name="Camera" Value="CameraConfig"/>
        <AutoFormComponent Name="Sampler" Value="SamplerConfig"/>
        <AutoFormComponent Name="Integrator" Value="IntegratorConfig"/>
    </div>
    <div class="col">
        <img src="@Img" alt="No img"/>
    </div>
</div>

@code {
    private CameraConfig CameraConfig { get; set; }
    private SamplerConfig SamplerConfig { get; set; }
    private IntegratorConfig IntegratorConfig { get; set; }
    public int Progress { get; set; }
    public float ProgressPct { get; set; }
    private Timer timer;

    protected string Img { get; set; }
    protected string Text { get; set; }
    public string RendererTypeName { get; set; }
    AbstractRenderer renderer;
    private readonly object objLock = new object();
    public Task<float[]> RenderTask { get; set; }
    public Dictionary<string, Type> Renderers { get; set; }
    public bool IsRunning { get; set; } = false;

    protected override void OnInitialized()
    {
        timer = new Timer(Refresh, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(1));

        var types = typeof(HelloWorldRenderer).Assembly.GetTypes().Where(type => type.IsSubclassOf(typeof(AbstractRenderer))).ToArray();
        Renderers = types.ToDictionary(type => type.Name);
        Init(types.First().Name);
    }

    CancellationTokenSource tokenSource;

    private void Run()
    {
        Stop();
        if (renderer == null)
        {
            return;
        }
        renderer.Init();

        Text = renderer.Text;
        StateHasChanged();
        renderer.Integrator.TileRendered += OnTileRendered;
        Progress = 0;
        tokenSource = new();
        var cancellationToken = tokenSource.Token;
        RenderTask = Task.Run(() => renderer.Integrator.Render(renderer.Scene, cancellationToken, cancellationToken ), cancellationToken);
        IsRunning = true;
    }

    private void Stop()
    {
        IsRunning = false;
        Progress = 0;
        if (renderer?.Integrator != null)
        {
            renderer.Integrator.TileRendered -= OnTileRendered;
        }

        tokenSource?.Cancel();
        StateHasChanged();
    }

    private void Refresh(object state)
    {
        if (renderer == null || !IsRunning)
        {
            return;
        }
        var rgbs = renderer.Camera.Film.GetRgb();
        Img = ToBase64Image(rgbs, renderer.Camera.Film.FullResolution);
        InvokeAsync(StateHasChanged);
    }

    private void OnTileRendered(int n, int nbTiles, TimeSpan swTotal)
    {
        lock (objLock)
        {
            Progress++;
            ProgressPct = (100f * Progress) / nbTiles;
            string msg = $"{renderer.GetType().Name,-40}: {swTotal:hh\\:mm\\:ss} [{Progress,5} / {nbTiles,5}] {(100f * Progress) / nbTiles,-5:##0.00} %";
            Text = msg;
        }
    }

    private static string ToBase64Image(float[] rgbs, Point2I fullResolution)
    {
    // Write RGB image
        Bitmap bmp = new Bitmap(fullResolution.X, fullResolution.Y, PixelFormat.Format24bppRgb);
        int pos = 0;
        for (int y = 0; y < fullResolution.Y; y++)
        {
            for (int x = 0; x < fullResolution.X; x++)
            {
                var red = (int)rgbs[pos];
                var green = (int)rgbs[pos + 1];
                var blue = (int)rgbs[pos + 2];
                var r = Math.Min(255, red);
                var g = Math.Min(255, green);
                var b = Math.Min(255, blue);

                var fromArgb = Color.FromArgb(r, g, b);
                bmp.SetPixel(x, y, fromArgb);
                pos += 3;
            }
        }
        using var memoryStream = new MemoryStream();

        bmp.Save(memoryStream, ImageFormat.Png);
        var base64 = Convert.ToBase64String(memoryStream.ToArray());
        return $"data:image/png;base64,{base64}";
    }

    private void OnSelectRenderer(ChangeEventArgs changeEventArgs)
    {
        Stop();
        Init(changeEventArgs.Value as string);
    }

    private void Init(string typeName)
    {
        RendererTypeName = typeName;
        if (RendererTypeName == null)
        {
            return;
        }

        if (!Renderers.TryGetValue(RendererTypeName, out var rendererType))
        {
            return;
        }

        renderer = Activator.CreateInstance(rendererType) as AbstractRenderer;
        if (renderer == null)
        {
            return;
        }
        CameraConfig = renderer.CameraConfig;
        SamplerConfig = renderer.SamplerConfig;
        IntegratorConfig = renderer.IntegratorConfig;
        
        StateHasChanged();
    }
}
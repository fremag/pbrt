@using System.Reflection
@inherits AutoFormComponentBase
<div class="card">
    <div class="card-body">
        <div class="card-title">
            <button class="btn btn-primary btn-sm" @onclick="Collapse">@ButtonCollapse</button>@Name
        </div>
        <p class="card-body" style="display: @Display">
            @if (Obj != null)
            {
                @foreach (var property in Obj.GetType().GetProperties().Where(p => p.CanWrite))
                {
                    <div class="row">
                        @if (property.PropertyType.IsClass)
                        {
                            @CreateForm(property)
                        }
                        else
                        {
                            var value = property.GetValue(Obj);
                            var valueStr = value?.ToString();
                            <AutoFormPropertyComponent Obj="Obj" PropertyInfo="property" OnChange="StateHasChanged" Value="@valueStr"/>
                        }
                    </div>
                }
            }
        </p>
    </div>
</div>


@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public object Obj { get; set; }

    [Parameter]
    public bool MainForm { get; set; } = true;

    public string ButtonCollapse => Collapsed ? "+" : "-";
    public string Display => Collapsed ? "none" : "block";
    public bool Collapsed { get; set; } = true;

    List<AutoFormComponentBase> components = new();

    private RenderFragment CreatePropertyComponent(PropertyInfo propertyInfo) => builder =>
    {
        var propertyValue = propertyInfo.GetValue(Obj)?.ToString();
        builder.OpenComponent<AutoFormPropertyComponent>(0);
        builder.AddAttribute(1, nameof(AutoFormPropertyComponent.PropertyInfo), propertyInfo);
        builder.AddAttribute(2, nameof(AutoFormPropertyComponent.Value), propertyValue);
        builder.AddAttribute(3, nameof(AutoFormPropertyComponent.Obj), Obj);
        builder.AddAttribute(4, nameof(AutoFormPropertyComponent.OnChange), () => StateHasChanged());

        builder.CloseComponent();
    };

    private RenderFragment CreateForm(PropertyInfo propertyInfo) => builder =>
    {
        var propertyValue = propertyInfo.GetValue(Obj);
        builder.OpenComponent<AutoFormComponent>(0);
        builder.AddAttribute(1, nameof(Obj), propertyValue);
        builder.AddAttribute(2, nameof(Name), propertyInfo.Name);
        builder.AddAttribute(3, nameof(MainForm), false);

        builder.CloseComponent();
    };

    private void Collapse()
    {
        Collapsed = !Collapsed;
        StateHasChanged();
    }

}
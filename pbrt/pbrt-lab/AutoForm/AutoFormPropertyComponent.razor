@using System.Reflection

<div class="row">
    <div class="col-6">@PropertyInfo.Name</div>
    <div class="col-6">
        @if (PropertyInfo.PropertyType.IsEnum)
        {
            <select @bind="Value">
                @foreach (var name in Enum.GetNames(PropertyInfo.PropertyType))
                {
                    <option>@name</option>
                }
            </select>
        }
        else
        {
            <input @bind="Value"/>
        }
    </div>
</div>
@code {
    private string objValue;

    [Parameter]
    public PropertyInfo PropertyInfo { get; set; }

    [Parameter]
    public string Value
    {
        get => objValue;
        set
        {
            objValue = value;
            InvokeAsync(Apply);
        } 
    }

    [Parameter]
    public object Obj { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }
    
    public async Task Apply()
    {
        if (Obj == null)
        {
            return;
        }
        var currentValue = PropertyInfo.GetValue(Obj);
        object value = null;
        bool hasChanged = false;
        
        if (PropertyInfo.PropertyType == typeof(float))
        {
            if (!float.TryParse(Value, out var f))
            {
                return;
            }
            hasChanged = currentValue == null || Math.Abs(f - (float)currentValue) > 1e-20;
            value = f;
        } 
        else if (PropertyInfo.PropertyType == typeof(int))
        {
            if (!int.TryParse(Value, out var i))
            {
                return;
            } 
            
            hasChanged = currentValue == null || i != (int)currentValue;
            value = i;
        }
        else if (PropertyInfo.PropertyType.IsEnum)
        {
            value = Enum.Parse(PropertyInfo.PropertyType, Value);
            hasChanged = currentValue == null || (int)value != (int)currentValue;
        }

        if (hasChanged)
        {
            PropertyInfo.SetValue(Obj, value);
            StateHasChanged();
            await OnChange.InvokeAsync();
        }
    }
}